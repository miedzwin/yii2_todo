<?php declare(strict_types=1);

namespace App\Controllers;

use App\Form\Task\TaskCreateForm;
use App\Models\Task;
use Yii;
use yii\rest\ActiveController;
use yii\web\MethodNotAllowedHttpException;
use yii\web\NotFoundHttpException;
use yii\web\Response;

/**
 * Class TaskController
 * @package App\Controllers
 */
class TaskController extends ActiveController
{
    /**
     * @var string
     */
    public $modelClass = Task::class;

    /**
     * @return array|array[]
     */
    public function behaviors()
    {
        $behaviors = parent::behaviors();
        $behaviors['bootstrap'] = [
            'class' => \yii\filters\ContentNegotiator::class,
            'formats' => [
                'application/json' => Response::FORMAT_JSON,
            ],
        ];
        return $behaviors;
    }

    /**
     * @return array
     */
    public function actions(): array
    {
        $actions = parent::actions(); // TODO: Change the autogenerated stub
        unset($actions['create']);
        unset($actions['update']);
        return $actions;
    }

    /**
     * Request PATH
     * {
     *   "name": "test task",
     *   "content": "Lorem ipsum it dolor"
     *   "status": "done"
     *  }
     *
     * @param int $id
     * @return array|MethodNotAllowedHttpException|NotFoundHttpException
     * @throws \Throwable
     * @throws \yii\db\StaleObjectException
     */
    public function actionUpdate(int $id)
    {
        if (!Yii::$app->request->getIsPatch()) {
            return new MethodNotAllowedHttpException();
        }
        if (!Yii::$app->getUser()) {
            return [
                'hasErrors' => true,
                'message' => 'user must be logged in'
            ];
        }
        $task = Task::findOne(['id' => $id, 'user_id' => Yii::$app->user->id]);

        if (!$task) {
            return new NotFoundHttpException();
        }
        $data = json_decode(Yii::$app->request->getRawBody(), true);
        $task->name = $data['name'] ?? $task->name;
        $task->content = $data['content'] ?? $task->content;
        $task->status = $data['status'] ?? $task->status;
        $task->update();

        return [
            'success' => true,
            'message' => 'Task successfully updated'
        ];
    }

    /**
     * Request POST
     * {
     *   "name": "test task",
     *   "content": "Lorem ipsum it dolor"
     *  }
     *
     * @return MethodNotAllowedHttpException
     */
    public function actionCreate()
    {
        if (!Yii::$app->request->getIsPost()) {
            return new MethodNotAllowedHttpException();
        }
        if (!Yii::$app->getUser()) {
            return [
                'hasErrors' => true,
                'message' => 'user must be logged in'
            ];
        }
        $form = new TaskCreateForm();
        $data = json_decode(Yii::$app->request->getRawBody(), true);
        $form->userId = Yii::$app->user->id;
        $form->name = $data['name'];
        $form->content = $data['content'];
        $form->validate();
        if ($form->hasErrors()) {
            return [
                'hasErrors' => true,
                'errors' => $form->getErrors(),
            ];
        }

        $task = new Task();
        $task->name = $data['name'];
        $task->content = $data['content'];
        $task->user_id = Yii::$app->user->id;
        $task->save();

        return [
            'success' => true,
            'message' => 'Task successfully created'
        ];
    }
}